//setRenderer("method": "PT", ("samples": 16384,));
setRenderer("method": "BPT", ("samples": 16384,));
//setRenderer("method": "debug", (("geometric normal", "shading normal"),));
setRenderSettings("width": 1920, "height": 1080, "brightness": 2.0);

setEnvironment("images/Malibu_Overlook_3k_corrected.exr");

plain = load3DModel("models/plain_proto.obj");
addChild(root, plain);

function grass0Material(name, attrs) {
    difCol = attrs["diffuse color"];
    baseColor = Spectrum("Reflectance", "sRGB", 
                         2 * difCol[0], 2 * difCol[1], 2 * difCol[2]);
    r = createSurfaceMaterial("matte", (SpectrumTexture(baseColor * 0.7),));
    tBase = createSurfaceMaterial("matte", (SpectrumTexture(baseColor * 0.3),));
    t = createSurfaceMaterial("flipped", (tBase,));
    return createSurfaceMaterial("sum", (r, t));
}
grass0 = load3DModel("models/grass.obj", grass0Material);
function grass1Material(name, attrs) {
    baseColor = Spectrum("Reflectance", "sRGB", 0.7, 0.6, 0.3);
    r = createSurfaceMaterial("matte", (SpectrumTexture(baseColor * 0.7),));
    tBase = createSurfaceMaterial("matte", (SpectrumTexture(baseColor * 0.3),));
    t = createSurfaceMaterial("flipped", (tBase,));
    return createSurfaceMaterial("sum", (r, t));
}
grass1 = load3DModel("models/grass.obj", grass1Material);

grass0Reference = createReferenceNode(grass0);
grass1Reference = createReferenceNode(grass1);

pikachu = load3DModel("models/pikachu_corrected_subdivided.obj");
pikachuReference = createReferenceNode(pikachu);
kirby = load3DModel("models/Kirby_Pikachu_Hat/pikachu_hat.obj");
kirbyReference = createReferenceNode(kirby);

function scanCallback(p, t, b, n) {
    // needs member access like p.x?
    trans = translate(getX(p), getY(p), getZ(p));
    axis = cross(Vector(0, 1, 0), n);
    angle = acos(clamp(dot(Vector(0, 1, 0), n), -1, 1));
    if (angle < 0.0001)
        axis = Vector(1, 0, 0);
    rot = rotate(angle, axis);
    sc = scale(0.25);
    rotY = rotateY(2 * 3.1415926536 * random());
    instanceNode = createNode();
    addChild(instanceNode, grass0Reference);
    if (random() < 0.2) {
        adjustRotNode = createNode();
        addChild(adjustRotNode, grass1Reference);
        setTransform(adjustRotNode, rotateY(2 * 3.1415926536 * random()));
        addChild(instanceNode, adjustRotNode);
    }
    if (random() < 0.95) {
        adjustScaleNode = createNode();
        addChild(adjustScaleNode, pikachuReference);
        setTransform(adjustScaleNode, scale(0.3 + 0.1 * (random() - 0.5)) * translate(0, 1, 0));
        addChild(instanceNode, adjustScaleNode);
    }
    else {
        adjustScaleNode = createNode();
        addChild(adjustScaleNode, kirbyReference);
        setTransform(adjustScaleNode, scale(0.3 + 0.1 * (random() - 0.5)));
        addChild(instanceNode, adjustScaleNode);
    }
    setTransform(instanceNode, trans * rot * sc * rotY);
    addChild(root, instanceNode);
}

scanXZFromYPlus(plain, 60, 60, scanCallback);

function lowpolyTreeMaterial(name, attrs) {
    difCol = attrs["diffuse color"];
    RdTex = SpectrumTexture(Spectrum("Reflectance", "sRGB", 
                                     2 * difCol[0], 2 * difCol[1], 2 * difCol[2]));
    RsTex = SpectrumTexture(Spectrum("type": "Reflectance", 0.025));
    nxTex = nyTex = FloatTexture(100.0);
    return createSurfaceMaterial("Ashikhmin", (RdTex, RsTex, nxTex, nyTex));
}
lowpolyTreeNode = createNode();
lowpolyTree = load3DModel("models/lowpoly_tree.obj", lowpolyTreeMaterial);
addChild(lowpolyTreeNode, lowpolyTree);
setTransform(lowpolyTreeNode, translate(0.3727, 0.8596, 0.8495) * scale(0.25));
addChild(root, lowpolyTreeNode);

function toyCarMaterial(name, attrs) {
    difCol = attrs["diffuse color"];
    RdTex = SpectrumTexture(Spectrum(1.5 * difCol[0], 1.5 * difCol[1], 1.5 * difCol[2]));
    RsTex = SpectrumTexture(Spectrum("type": "Reflectance", 0.025));
    nxTex = nyTex = FloatTexture(100.0);
    return createSurfaceMaterial("Ashikhmin", (RdTex, RsTex, nxTex, nyTex));
}
toyCarNode = createNode();
toyCar = load3DModel("models/toycar.obj", toyCarMaterial);
addChild(toyCarNode, toyCar);
setTransform(toyCarNode, 
             translate(0.0, 0.72593, 1.4) * 
             rotateZ(0.0) * 
             rotateY(105.319 * 3.1415926536 / 180.0) * 
             rotateX(-16.663 * 3.1415926536 / 180.0) *
             scale(0.1));
//addChild(root, toyCarNode);

cameraNode = createNode();
camera = createPerspectiveCamera("aspect": 16.0 / 9.0, "fovY": 0.5235987756, "radius": 0.0025, 
                                     "imgDist": 1.0, "objDist": 2.4);
addChild(cameraNode, camera);
setTransform(cameraNode, translate(2.158, 0.825, 2.38) * 
                        rotateY(-(180.0 - 49.9) * 3.1415926536 / 180) * 
                        rotateX(-5.44 * 3.1415926536 / 180));
addChild(root, cameraNode);

setTransform(root, rotateY(-1.5707963268));
